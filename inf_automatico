#!/bin/bash
#Lê o arquivo token no home do seu usuário
token=$(cat $HOME/token)
#Incrementa com o padrão esperado pelo GitLab
tokenfull="Authorization: Bearer $token"
#Diretório onde está clonado os serviços
diretorio="$HOME/gitlab/pmid/nio/"
diretorio2="$HOME/pmid/teste/nio/"
tipo=nio
#Data no formato ANO-MES-DIA-HORA-MINUTO-SEGUNDO
data=$(date +"%Y-%m-%d-%H-%M-%S")

#Função que cria a barra de progresso
progresso() {
    # Em segundos
    duracao=300
    #Intervalo de atualização em segundos
    intervalo=1
    # calculate the number of atualizacao needed
    atualizacao=$(($duracao / $intervalo))
    #Looping que monta a barra de progresso
    for ((i = 0; i <= $atualizacao; i++)); do
        #Calcula a porcentagem de concluída
        porcentagem=$((($i * 100 / $atualizacao)))
        #Imprime a barra de progresso
        printf "["
        for ((j = 0; j < $porcentagem / 2; j++)); do
            printf "#"
        done
        for ((j = $porcentagem / 2; j < 50; j++)); do
            printf " "
        done
        printf "] %d%%\r" $porcentagem
        #Espera o tempo de atualização
        sleep $intervalo
    done
    #Imprime uma nova linha
    echo ""
}

#Função do DE PARA - Coleta o que vai ser alterado e para o que vai ser alterado e o número da INF
de_para() {
    echo Alteracao de para:
    read -p "De: " de
    read -p "Para: " para
    read -p "Numero da INF: " inf
    filtro=$de
}

#Função do DE PARA, que faz as alterações
de_para1() {
    #Faz as alterações nos envs
    if [[ $envn != "" && -e $envn ]]; then
        changes=$(sed -i "s/$de/$para/g w /dev/stdout" $envn)
    elif [[ $envm != "" && -e $envm ]]; then
        changes=$(sed -i "s/$de/$para/g w /dev/stdout" $envm)
    else
        arquivos=($(ls .env.* | grep -v -E '.env.dev|.env.prd|.env.m-prd|.env.st|m-*'))
        if [[ "${arquivos[@]}" != "" ]]; then
            changes=$(sed -i "s/$de/$para/g w /dev/stdout" ${arquivos[@]})
        else
            arquivos=($(ls .env.* | grep -v -E '.env.dev|.env.prd|.env.m-prd|.env.st'))
            if [[ "${arquivos[@]}" != "" ]]; then
                changes=$(sed -i "s/$de/$para/g w /dev/stdout" ${arquivos[@]})
            fi
        fi
    fi
    #Valida se os arquivos foram alterados, ou seja se a string $de existe dentro do arquivo
    if [[ "$changes" != "" ]]; then
        #Se sim imprime na tela e no arquivo de saida que fica no HOME do seu usuário o nome do serviço
        echo "Servico ${pmid[$i]}" | tee -a "$HOME"/INF_"$inf"_"$data"
        #Imprime na tela e no arquivo de saida o DE PARA que foi feito
        echo "De: $de Para: $para" | tee -a "$HOME"/INF_"$inf"_"$data"
        #Imprime na tela e no arquivo de saida os arquivos env que foram alterados
        echo Arquivos alterados | tee -a "$HOME"/INF_"$inf"_"$data"
        alterados[$i]=$(git diff --name-only)
        git diff --name-only | tee -a "$HOME"/INF_"$inf"_"$data"
        #Pega a última tag do serviço
        ultima_tag[$i]=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
        #Imprime na tela e no arquivo de saida a última tag do serviço
        echo Ultima tag local ${ultima_tag[$i]} | tee -a "$HOME"/INF_"$inf"_"$data"
        #Incrementa 1 ao valor da tag - Ex: Para tag 1.0.0.0 o valor será 1.0.0.1
        tag_mais_um=$(echo ${ultima_tag[$i]} | awk -F '.' '{print $4+1}')
        nova_tag[$i]=$(echo ${ultima_tag[$i]} | sed "s/\.[0-9]*$/.$tag_mais_um/")
        #Imprime na tela e no arquivo de saida a nova tag do serviço
        echo Tag gerada "${nova_tag[$i]}" | tee -a "$HOME"/INF_"$inf"_"$data"
        #Faz os commits gera a nova tag e envia tudo para o GitLab
        git add .
        git commit -m "INF $inf" >/dev/null
        git push -q >/dev/null
        git tag "${nova_tag[$i]}"
        git push -q --tags >/dev/null
        servicoalt[$i]="${pmid[$i]}"
    fi
}

#Função que deleta o valor informado
deleta() {
    read -p "Informe o que eh para deletar: " deletar
    read -p "Numero da INF: " inf
    filtro=$deletar
    echo "Deletando $filtro" | tee -a "$HOME"/INF_"$inf"_"$data"
}

#Função que deleta o valor informado
deleta1() {
    arquivos=($(ls .env.* | grep -v -E '.env.dev|.env.prd|.env.m-prd|.env.st|m-*'))
    if [[ "${arquivos[@]}" != "" ]]; then
        for file in "${arquivos[@]}"; do
            sed "/$deletar/d" -i "$file"
        done
    else
        arquivos=($(ls .env.* | grep -v -E '.env.dev|.env.prd|.env.m-prd|.env.st'))
        if [[ "${arquivos[@]}" != "" ]]; then
            for file in "${arquivos[@]}"; do
                sed "/$deletar/d" -i "$file"
            done
        fi
    fi
    validacao=$(git diff --name-only)
    if [[ $validacao != "" ]]; then
        echo "Servico ${pmid[$i]}" | tee -a "$HOME"/INF_"$inf"_"$data"
        #Imprime na tela e no arquivo de saida os arquivos env que foram alterados
        echo Arquivos alterados | tee -a "$HOME"/INF_"$inf"_"$data"
        alterados[$i]=$(git diff --name-only)
        git diff --name-only | tee -a "$HOME"/INF_"$inf"_"$data"
        #ultima_tag[$i]=
        #Pega a última tag do serviço
        ultima_tag[$i]=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
        echo Ultima tag local "${ultima_tag[$i]}" | tee -a "$HOME"/INF_"$inf"_"$data"
        #Incrementa 1 ao valor da tag - Ex: Para tag 1.0.0.0 o valor será 1.0.0.1
        tag_mais_um=$(echo "${ultima_tag[$i]}" | awk -F '.' '{print $4+1}')
        nova_tag[$i]=$(echo "${ultima_tag[$i]}" | sed "s/\.[0-9]*$/.$tag_mais_um/")
        #Imprime na tela e no arquivo de saida a nova tag do serviço
        echo Tag gerada "${nova_tag[$i]}" | tee -a "$HOME"/INF_"$inf"_"$data"
        #Faz os commits gera a nova tag e envia tudo para o GitLab
        git add .
        git commit -m "INF $inf" >/dev/null
        git push -q >/dev/null
        git tag "${nova_tag[$i]}"
        git push -q --tags >/dev/null
        servicoalt[$i]="${pmid[$i]}"
    fi
}

espec_env() {
    echo Alteracao de um env especifico:
    read -p "De: " de
    read -p "Para: " para
    read -p "Numero da INF: " inf
    echo "Informe o arquivo env para ser alterado: Ex: uat prd uat2 m-uat"
    read env
    env=$(echo "$env" | awk '{print tolower($0)}')
    filtro=$de
    envn=$(sed "s/^/.env./g" <<<$env)
    envm=$(sed "s/^/.env.m-/g" <<<$env)
}

##Função responsável por apertar o play do deploy da pipeline
play() {
    id=$(curl -s --header "$tokenfull" -X GET https://gitlab.engdb.com.br/api/v4/projects?search=$servico | jq --arg tipo "$tipo" '.[] | select(.namespace.name == $tipo) | .id' | head -n 1)
    pipeline=$(curl -s --header "$tokenfull" -X GET https://gitlab.engdb.com.br/api/v4/projects/$id/pipelines?per_page=300 | jq --arg versao "$versao" '.[] | select(.ref == $versao) | .id' | head -n 1)
    echo Pipeline gerada | tee -a "$HOME"/INF_"$inf"_"$data"
    echo "https://gitlab.engdb.com.br/pmid/$tipo/$servico/-/pipelines/$pipeline" | tee -a "$HOME"/INF_"$inf"_"$data"
    if [[ $resp == "s" ]]; then
        exec=($(echo ${alterados[$i]}))
        b=0
        while [ $b -lt ${#exec[@]} ]; do
            deploy=$(sed 's/.env.//g' <<<${exec[$b]})
            job=$(curl -s --request GET --header "$tokenfull" https://gitlab.engdb.com.br/api/v4/projects/$id/pipelines/$pipeline/jobs | jq --arg deploy "$deploy" '.[] | select(.name == "deploy_'"$deploy"'_blue") | .id')
            curl -s --request POST --header "$tokenfull" "https://gitlab.engdb.com.br/api/v4/projects/$id/jobs/$job/play" >/dev/null
            b=$(($b + 1))
        done
    fi
}

x=0
while [ $x == "0" ]; do
    echo "Informe o tipo de função que deseja utilizar"
    echo "Para usar a função alteracao DE PARA informe depara"
    echo "Para usar a função de DELETAR informe del"
    echo "Para usar a função DE PARA, para alterar um arquivo env especifico informe esp"
    read x
    if [[ $x == "del" ]]; then
        acao=deleta
        deleta
    elif [[ $x == "depara" ]]; then
        acao=de_para
        de_para
    elif [[ $x == "esp" ]]; then
        acao=espec_env
        espec_env
    else
        echo "Tente novamente"
        x=0
    fi
done

pid=$(ps -ef | grep agent | grep -v grep | awk '{print $2}')
if [[ $pid == "" ]]; then
    echo "Informe a senha da chave SSH"
    eval $(keychain --eval id_rsa)
else
    eval $(keychain --eval id_rsa)
fi

pmid=( $(grep -Rl $filtro $diretorio  | cut -d\/ -f7 | sort -u | grep -v teste ) )
#pmid=($(grep -Rl $filtro $diretorio2 | cut -d\/ -f7 | sort -u))
ultima_tag=()
nova_tag=()
arquivos=()
alterados=()
servicoalt=()

#Primeiro loop. Verifica o que tem que ser alterado e altera.
i=0
while [ $i -lt ${#pmid[@]} ]; do
    cd $diretorio${pmid[$i]}
    #cd $diretorio2${pmid[$i]}
    git pull >/dev/null
    if [[ "$acao" == "de_para" ]]; then
        de_para1
    elif [[ "$acao" == "deleta" ]]; then
        deleta1
    elif [[ "$acao" == "espec_env" ]]; then
        de_para1
    fi
    i=$(($i + 1))
done

#Valida se pelo menos um serviço foi alterado caso contrário finaliza a execução e retorna a mensagem do echo
if [[ ${servicoalt[0]} != "" ]]; then
    echo "Aguarde 5 minutos, enquanto as pipelines são geradas"
    progresso
    echo "Deseja que as instalações sejam feitas de maneira automática ? s para sim ou n para não"
    echo "Caso responda n será necessário entrar nos links de todas as pipelines que eu informar e instalar manualmente"
    read resp
else
    echo "Nada foi alterado pois nao foi encontrado o dado informado"
    exit 1
fi

#Segundo loop. Responsável por apertar o play ou seja fazer a instalação a partir do env que foi alterado
#Ex: Serviço bruno-teste-v1 .env. alterado foi apenas o de uat2 (.env.uat2) o play só será dado no deploy_uat2_blue.
#Caso seja o .env.m-uat o play será dado no deploy_m-uat_blue
i=0
while [ $i -lt ${#servicoalt[@]} ]; do
    servico="${servicoalt[$i]}"
    versao="${nova_tag[$i]}"
    play
    i=$(($i + 1))
done

echo "Caso precise o arquivo do log ""$HOME""/INF_""$inf""_""$data"""
